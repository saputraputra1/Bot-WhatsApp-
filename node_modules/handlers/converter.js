const fs = require('fs')
const path = require('path')
const ffmpeg = require('fluent-ffmpeg')
const { tmpdir } = require('os')

// Buat folder temp jika belum ada
const tempDir = path.join(tmpdir(), 'wa-bot')
if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir)
}

module.exports = async (sock, m, config) => {
    const prefix = config.prefix
    const text = m.message?.conversation || ''
    const quoted = m.message?.extendedTextMessage?.contextInfo?.quotedMessage

    // Handler !sticker (gambar ke sticker)
    if (text.startsWith(`${prefix}sticker`) && (m.message.imageMessage || quoted?.imageMessage)) {
        try {
            const media = m.message.imageMessage || quoted.imageMessage
            const buffer = await sock.downloadMediaMessage(m)
            const inputPath = path.join(tempDir, `input_${Date.now()}.jpg`)
            const outputPath = path.join(tempDir, `sticker_${Date.now()}.webp`)

            fs.writeFileSync(inputPath, buffer)

            await new Promise((resolve, reject) => {
                ffmpeg(inputPath)
                    .input(inputPath)
                    .outputOptions([
                        '-vcodec libwebp',
                        '-vf scale=512:512',
                        '-lossless 1',
                        '-q 80',
                        '-preset default',
                        '-loop 0',
                        '-an',
                        '-vsync 0'
                    ])
                    .toFormat('webp')
                    .save(outputPath)
                    .on('end', () => {
                        resolve()
                    })
                    .on('error', (err) => {
                        reject(err)
                    })
            })

            const stickerBuffer = fs.readFileSync(outputPath)
            await sock.sendMessage(m.key.remoteJid, { sticker: stickerBuffer })

            // Hapus file temporary
            fs.unlinkSync(inputPath)
            fs.unlinkSync(outputPath)

        } catch (error) {
            console.error('Error creating sticker:', error)
            await sock.sendMessage(m.key.remoteJid, { 
                text: '❌ Gagal membuat stiker. Pastikan mengirim gambar dengan caption !sticker atau reply gambar dengan !sticker'
            })
        }
    }

    // Handler !toimg (sticker ke gambar)
    if (text.startsWith(`${prefix}toimg`) && (m.message.stickerMessage || quoted?.stickerMessage)) {
        try {
            const media = m.message.stickerMessage || quoted.stickerMessage
            const buffer = await sock.downloadMediaMessage(m)
            const outputPath = path.join(tempDir, `image_${Date.now()}.png`)

            await new Promise((resolve, reject) => {
                ffmpeg(buffer)
                    .toFormat('png')
                    .save(outputPath)
                    .on('end', () => {
                        resolve()
                    })
                    .on('error', (err) => {
                        reject(err)
                    })
            })

            const imageBuffer = fs.readFileSync(outputPath)
            await sock.sendMessage(m.key.remoteJid, { 
                image: imageBuffer,
                caption: 'Berhasil mengkonversi stiker ke gambar'
            })

            // Hapus file temporary
            fs.unlinkSync(outputPath)

        } catch (error) {
            console.error('Error converting sticker:', error)
            await sock.sendMessage(m.key.remoteJid, { 
                text: '❌ Gagal mengkonversi stiker ke gambar. Pastikan mengirim/reply stiker dengan caption !toimg'
            })
        }
    }
}
